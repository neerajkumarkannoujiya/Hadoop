


Word Count Program in Java Using Hadoop:

Step 1: Create input.txt
	i.e. : hello i am neeraj how are you hello neeraj
	
Step 2: Create WordCount.java file
	i.e. :
	import java.io.IOException;
	import java.util.StringTokenizer;

	import org.apache.hadoop.conf.Configuration;
	import org.apache.hadoop.fs.Path;
	import org.apache.hadoop.io.IntWritable;
	import org.apache.hadoop.io.Text;
	import org.apache.hadoop.mapreduce.Job;
	import org.apache.hadoop.mapreduce.Mapper;
	import org.apache.hadoop.mapreduce.Reducer;
	import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
	import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

	public class WordCount {

    // Mapper class
    public static class TokenizerMapper extends Mapper<Object, Text, Text, IntWritable> {
        private final static IntWritable one = new IntWritable(1);
        private Text word = new Text();

        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
            StringTokenizer itr = new StringTokenizer(value.toString());
            while (itr.hasMoreTokens()) {
                word.set(itr.nextToken());
                context.write(word, one);
            }
        }
    }

    // Reducer class
    public static class IntSumReducer extends Reducer<Text, IntWritable, Text, IntWritable> {
        private IntWritable result = new IntWritable();

        public void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {
            int sum = 0;
            for (IntWritable val : values) {
                sum += val.get();
            }
            result.set(sum);
            context.write(key, result);
        }
    }

    // Main method
    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "word count");
        job.setJarByClass(WordCount.class);
        job.setMapperClass(TokenizerMapper.class);
        job.setCombinerClass(IntSumReducer.class);
        job.setReducerClass(IntSumReducer.class);
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);
        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));
        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}


Step 3 : Compile the java program
	i.e. javac -classpath `hadoop classpath` -d . WordCount.java
	
Step 4 : Create JAR File
	i.e. : jar -cvf WordCount.jar WordCount*.class
	
Step 5 : Verify JAR file
	i.e. : jar -tf WordCount.jar
		it gives bellow lines
		WordCount.class
		WordCount$TokenizerMapper.class
		WordCount$IntSumReducer.class
		
Step 6 : Create the /user/hadoop/input
	-> hdfs dfs -mkdir -p /user/hadoop/input

	For Delete folders 
	-> hadoop fs -rm -r /user2/hadoop/matrix/output

	Verify using
	-> hdfs dfs -ls /user/hadoop/input
	
Step 7 : Upload the Input File to HDFS
	-> hdfs dfs -put /home/neeraj7388011/input.txt /user/hadoop/input

	Verify using
	-> hdfs dfs -ls /user/hadoop/input
	
Step 8 : Run The Hadoop job
	-> hadoop jar /home/neeraj7388011/WordCount.jar WordCount /user/hadoop/input /user/hadoop/output

	Verify Using
	-> hdfs dfs -ls /user/hadoop/output
	
	Finally View Output
	-> hdfs dfs -cat /user/hadoop/output/part-r-00000
	
	It Gives Output like that 
	-> 	Hello	1
		Neeraj	1
		count	2
		is	2
		program	2
		this	1
		word	2
